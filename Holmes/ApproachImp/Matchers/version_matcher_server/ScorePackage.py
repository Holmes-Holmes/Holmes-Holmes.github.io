import configimport functoolsimport loggingimport osimport reimport timefrom abc import abstractmethodfrom enum import Enumfrom typing import Dict, Optional, Any, List, Set, Union, Tuple, Callablefrom language import ProgLangclass ScorePackage:    class Method(Enum):        PATCH_REPO, PATCH_SEARCH, REF_SEARCH, CPE_SEARCH = range(4)    def __init__(self, name: str, language: ProgLang, score: float = 100,                 rank: int = 0, method: Method = Method.CPE_SEARCH):        self.name: str = name        self.group, self.artifact = (':' + name).split(':')[-2:]        self.language: ProgLang = language        self.score: float = score        self.rank: int = rank        self.method = method    def __hash__(self):        return hash(self.name + self.language.name)    def __eq__(self, other):        return self.name == other.name and self.language == other.language    def __str__(self):        return 'PKG<%s>[%s]' % (self.name, self.language.name.lower())    @staticmethod    def cmp_by_score(p1: 'ScorePackage', p2: 'ScorePackage'):        s1, s2 = p1.score, p2.score     # score        n1, n2 = p1.name, p2.name       # name        l1, l2 = len(n1), len(n2)       # length        if s1 != s2:            return s2 - s1        if l1 != l2:            return l1 - l2        return 1 if n1 > n2 else -1